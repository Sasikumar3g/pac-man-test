// Get a reference to the game board
var gameBoard = document.getElementById("game-board");

// Size of each tile in pixels
var tileSize = 20;

// Define the size of the game play field
var gameBoardSize = 800;

// Function to create a dot
function createDot() {
  var dotSize = 10;
  var dot = document.createElement("div");
  dot.classList.add("dot");
  dot.style.height = `${dotSize}px`;
  dot.style.width = `${dotSize}px`;
  dot.style.position = "absolute";

  // Randomly position the dot within the game board
  dot.style.left = `${Math.random() * (gameBoardSize - dotSize)}px`;
  dot.style.top = `${Math.random() * (gameBoardSize - dotSize)}px`;

  return dot;
}

// Add dots to the game board
for (var i = 0; i < 100; i++) {
  // change the number here to add more or fewer dots
  gameBoard.appendChild(createDot());
}

// Define the game map
var map = [
  // 0 represents an empty space, and 1 represents a wall
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
  //... rest of your map configuration
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
];

// Draw the game map
for (var y = 0; y < map.length; y++) {
  for (var x = 0; x < map[y].length; x++) {
    if (map[y][x] === 1) {
      var wall = document.createElement("div");
      wall.classList.add("wall");
      wall.style.left = `${x * tileSize}px`;
      wall.style.top = `${y * tileSize}px`;
      gameBoard.appendChild(wall);
    }
  }
}

// Function to check if a character can move to a position
function canMoveTo(x, y, width, height) {
  var leftTile = Math.floor(x / tileSize);
  var rightTile = Math.floor((x + width - 1) / tileSize);
  var topTile = Math.floor(y / tileSize);
  var bottomTile = Math.floor((y + height - 1) / tileSize);

  for (var y = topTile; y <= bottomTile; y++) {
    for (var x = leftTile; x <= rightTile; x++) {
      if (map[y][x] === 1) {
        return false;
      }
    }
  }

  return true;
}

// Define the Ghost class
class Ghost {
  constructor(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color;
    this.direction = "left";
    this.el = document.createElement("div");
    this.el.classList.add("ghost");
    this.el.style.backgroundColor = color;
    gameBoard.appendChild(this.el);
  }

  update() {
    var speed = 1; // You can change this to make the ghosts move faster or slower
    var newX = this.x;
    var newY = this.y;

    switch (this.direction) {
      case "left":
        newX -= speed;
        break;
      case "up":
        newY -= speed;
        break;
      case "right":
        newX += speed;
        break;
      case "down":
        newY += speed;
        break;
    }

    if (canMoveTo(newX, newY, ghostSize, ghostSize)) {
      this.x = newX;
      this.y = newY;
    } else {
      // If the ghost can't move in its current direction, pick a new direction
      var directions = ["left", "up", "right", "down"];
      this.direction = directions[Math.floor(Math.random() * directions.length)];
    }

    this.el.style.left = `${this.x}px`;
    this.el.style.top = `${this.y}px`;
  }
}

// Create the ghosts
var ghosts = [
  new Ghost(50, 50, "red"),
  new Ghost(100, 50, "blue"),
  new Ghost(150, 50, "pink"),
];

// The game loop
function gameLoop() {
  // Update Pac-Man
  pacman.update();

  // Update the ghosts
  for (var i = 0; i < ghosts.length; i++) {
    ghosts[i].update();
  }

  // Check for collision with ghosts
  for (var i = 0; i < ghosts.length; i++) {
    if (isColliding(pacman.el, ghosts[i].el)) {
      // If Pac-Man collides with a ghost, end the game
      alert("Game Over");
      return;
    }
  }

  // If Pac-Man has eaten all the dots, end the game
  if (document.getElementsByClassName("dot").length === 0) {
    alert("You Win!");
    return;
  }

  // Call the game loop again in a bit
  requestAnimationFrame(gameLoop);
}

// Start the game loop
gameLoop();
